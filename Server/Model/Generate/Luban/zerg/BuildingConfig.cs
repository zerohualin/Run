
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace Cfg.zerg
{

/// <summary>
/// 建筑
/// </summary>
public sealed class BuildingConfig :  Bright.Config.BeanBase 
{
    public BuildingConfig(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Type = (zerg.BuildingType)_buf.ReadInt();
        Size = zerg.AreaSize.DeserializeAreaSize(_buf);
        Field = zerg.AreaSize.DeserializeAreaSize(_buf);
        Hp = _buf.ReadInt();
        InvadeFix = _buf.ReadFloat();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);LvModules = new System.Collections.Generic.Dictionary<int, string>(n * 3 / 2);for(var i = 0 ; i < n ; i++) { int _k;  _k = _buf.ReadInt(); string _v;  _v = _buf.ReadString();     LvModules.Add(_k, _v);}}
        MaxLevel = _buf.ReadInt();
        MaxSlot = _buf.ReadInt();
        RequireGroundType = (zerg.GroundType)_buf.ReadInt();
    }

    public static BuildingConfig DeserializeBuildingConfig(ByteBuf _buf)
    {
        return new zerg.BuildingConfig(_buf);
    }

    public string Id { get; private set; }
    public string Name { get; private set; }
    public zerg.BuildingType Type { get; private set; }
    public zerg.AreaSize Size { get; private set; }
    public zerg.AreaSize Field { get; private set; }
    public int Hp { get; private set; }
    public float InvadeFix { get; private set; }
    public System.Collections.Generic.Dictionary<int, string> LvModules { get; private set; }
    public int MaxLevel { get; private set; }
    public int MaxSlot { get; private set; }
    public zerg.GroundType RequireGroundType { get; private set; }

    public const int __ID__ = 968129604;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        Size?.Resolve(_tables);
        Field?.Resolve(_tables);
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        Size?.TranslateText(translator);
        Field?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Type:" + Type + ","
        + "Size:" + Size + ","
        + "Field:" + Field + ","
        + "Hp:" + Hp + ","
        + "InvadeFix:" + InvadeFix + ","
        + "LvModules:" + Bright.Common.StringUtil.CollectionToString(LvModules) + ","
        + "MaxLevel:" + MaxLevel + ","
        + "MaxSlot:" + MaxSlot + ","
        + "RequireGroundType:" + RequireGroundType + ","
        + "}";
    }
    }

}
