//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace Cfg.afk
{
public sealed partial class Skill :  Bright.Config.BeanBase 
{
    public Skill(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        StartCoolDown = _buf.ReadInt();
        CoolDown = _buf.ReadInt();
        CastingTime = _buf.ReadInt();
        ChannelingTime = _buf.ReadInt();
        ChannelingInterval = _buf.ReadInt();
        ManaCost = _buf.ReadInt();
        ShowRange = _buf.ReadInt();
        TriggerType = (SkillTriggerType)_buf.ReadInt();
        Loop = _buf.ReadBool();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ShowTag = new System.Collections.Generic.List<TagType>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { TagType _e0;  _e0 = (TagType)_buf.ReadInt(); ShowTag.Add(_e0);}}
        LanName = _buf.ReadString();
        LanText1 = _buf.ReadString();
        SkillType = (SkillType)_buf.ReadInt();
        Act1 = _buf.ReadString();
        Act2 = _buf.ReadString();
        Act3 = _buf.ReadString();
        Act4 = _buf.ReadString();
        ExBuff1 = _buf.ReadString();
        ExBuff2 = _buf.ReadString();
        ExBuff3 = _buf.ReadString();
        ExBuff4 = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);FieldPos = new System.Collections.Generic.List<DirType>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { DirType _e0;  _e0 = (DirType)_buf.ReadInt(); FieldPos.Add(_e0);}}
        FieldBuff = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BuffStack = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); BuffStack.Add(_e0);}}
        SkillMult = _buf.ReadFloat();
        ActMult1 = _buf.ReadFloat();
        ActMult2 = _buf.ReadFloat();
        ActMult3 = _buf.ReadFloat();
        ActMult4 = _buf.ReadFloat();
        Val1 = _buf.ReadString();
        Val2 = _buf.ReadString();
        Val3 = _buf.ReadString();
        Val4 = _buf.ReadString();
        Val5 = _buf.ReadFloat();
        InVerson = _buf.ReadBool();
        PostInit();
    }

    public static Skill DeserializeSkill(ByteBuf _buf)
    {
        return new afk.Skill(_buf);
    }

    public string Id { get; private set; }
    public string Name { get; private set; }
    public int StartCoolDown { get; private set; }
    public int CoolDown { get; private set; }
    public int CastingTime { get; private set; }
    public int ChannelingTime { get; private set; }
    public int ChannelingInterval { get; private set; }
    public int ManaCost { get; private set; }
    public int ShowRange { get; private set; }
    public SkillTriggerType TriggerType { get; private set; }
    public bool Loop { get; private set; }
    public System.Collections.Generic.List<TagType> ShowTag { get; private set; }
    public string LanName { get; private set; }
    public string LanText1 { get; private set; }
    public SkillType SkillType { get; private set; }
    public string Act1 { get; private set; }
    public string Act2 { get; private set; }
    public string Act3 { get; private set; }
    public string Act4 { get; private set; }
    public string ExBuff1 { get; private set; }
    public string ExBuff2 { get; private set; }
    public string ExBuff3 { get; private set; }
    public string ExBuff4 { get; private set; }
    public System.Collections.Generic.List<DirType> FieldPos { get; private set; }
    public string FieldBuff { get; private set; }
    public System.Collections.Generic.List<int> BuffStack { get; private set; }
    public float SkillMult { get; private set; }
    public float ActMult1 { get; private set; }
    public float ActMult2 { get; private set; }
    public float ActMult3 { get; private set; }
    public float ActMult4 { get; private set; }
    public string Val1 { get; private set; }
    public string Val2 { get; private set; }
    public string Val3 { get; private set; }
    public string Val4 { get; private set; }
    public float Val5 { get; private set; }
    public bool InVerson { get; private set; }

    public const int __ID__ = 19102505;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "StartCoolDown:" + StartCoolDown + ","
        + "CoolDown:" + CoolDown + ","
        + "CastingTime:" + CastingTime + ","
        + "ChannelingTime:" + ChannelingTime + ","
        + "ChannelingInterval:" + ChannelingInterval + ","
        + "ManaCost:" + ManaCost + ","
        + "ShowRange:" + ShowRange + ","
        + "TriggerType:" + TriggerType + ","
        + "Loop:" + Loop + ","
        + "ShowTag:" + Bright.Common.StringUtil.CollectionToString(ShowTag) + ","
        + "LanName:" + LanName + ","
        + "LanText1:" + LanText1 + ","
        + "SkillType:" + SkillType + ","
        + "Act1:" + Act1 + ","
        + "Act2:" + Act2 + ","
        + "Act3:" + Act3 + ","
        + "Act4:" + Act4 + ","
        + "ExBuff1:" + ExBuff1 + ","
        + "ExBuff2:" + ExBuff2 + ","
        + "ExBuff3:" + ExBuff3 + ","
        + "ExBuff4:" + ExBuff4 + ","
        + "FieldPos:" + Bright.Common.StringUtil.CollectionToString(FieldPos) + ","
        + "FieldBuff:" + FieldBuff + ","
        + "BuffStack:" + Bright.Common.StringUtil.CollectionToString(BuffStack) + ","
        + "SkillMult:" + SkillMult + ","
        + "ActMult1:" + ActMult1 + ","
        + "ActMult2:" + ActMult2 + ","
        + "ActMult3:" + ActMult3 + ","
        + "ActMult4:" + ActMult4 + ","
        + "Val1:" + Val1 + ","
        + "Val2:" + Val2 + ","
        + "Val3:" + Val3 + ","
        + "Val4:" + Val4 + ","
        + "Val5:" + Val5 + ","
        + "InVerson:" + InVerson + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}