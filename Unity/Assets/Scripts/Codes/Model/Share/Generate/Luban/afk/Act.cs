//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace Cfg.afk
{
public sealed partial class Act :  Bright.Config.BeanBase 
{
    public Act(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        TickBefore = _buf.ReadInt();
        TickAfter = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Tag = new System.Collections.Generic.List<TagType>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { TagType _e0;  _e0 = (TagType)_buf.ReadInt(); Tag.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Range = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); Range.Add(_e0);}}
        TargetType = (TargetType)_buf.ReadInt();
        RangeType = (RangeType)_buf.ReadInt();
        AoeType = (AoeType)_buf.ReadInt();
        MaxAoe = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);TargetTag = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); TargetTag.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);DmgBuff = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); DmgBuff.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ActionBuff = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); ActionBuff.Add(_e0);}}
        ScriptAct = _buf.ReadString();
        Val1 = _buf.ReadString();
        Val2 = _buf.ReadString();
        Val3 = _buf.ReadString();
        Val4 = _buf.ReadString();
        Val5 = _buf.ReadString();
        Val6 = _buf.ReadString();
        Val7 = _buf.ReadString();
        Val8 = _buf.ReadString();
        Val9 = _buf.ReadString();
        Val10 = _buf.ReadString();
        Resource = _buf.ReadString();
        LanName = _buf.ReadString();
        LanText1 = _buf.ReadString();
        InVerson = _buf.ReadBool();
        PostInit();
    }

    public static Act DeserializeAct(ByteBuf _buf)
    {
        return new afk.Act(_buf);
    }

    public string Id { get; private set; }
    public string Name { get; private set; }
    public int TickBefore { get; private set; }
    public int TickAfter { get; private set; }
    public System.Collections.Generic.List<TagType> Tag { get; private set; }
    public System.Collections.Generic.List<int> Range { get; private set; }
    public TargetType TargetType { get; private set; }
    public RangeType RangeType { get; private set; }
    public AoeType AoeType { get; private set; }
    public int MaxAoe { get; private set; }
    public System.Collections.Generic.List<string> TargetTag { get; private set; }
    public System.Collections.Generic.List<string> DmgBuff { get; private set; }
    public System.Collections.Generic.List<string> ActionBuff { get; private set; }
    public string ScriptAct { get; private set; }
    public string Val1 { get; private set; }
    public string Val2 { get; private set; }
    public string Val3 { get; private set; }
    public string Val4 { get; private set; }
    public string Val5 { get; private set; }
    public string Val6 { get; private set; }
    public string Val7 { get; private set; }
    public string Val8 { get; private set; }
    public string Val9 { get; private set; }
    public string Val10 { get; private set; }
    public string Resource { get; private set; }
    public string LanName { get; private set; }
    public string LanText1 { get; private set; }
    public bool InVerson { get; private set; }

    public const int __ID__ = -1086029974;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "TickBefore:" + TickBefore + ","
        + "TickAfter:" + TickAfter + ","
        + "Tag:" + Bright.Common.StringUtil.CollectionToString(Tag) + ","
        + "Range:" + Bright.Common.StringUtil.CollectionToString(Range) + ","
        + "TargetType:" + TargetType + ","
        + "RangeType:" + RangeType + ","
        + "AoeType:" + AoeType + ","
        + "MaxAoe:" + MaxAoe + ","
        + "TargetTag:" + Bright.Common.StringUtil.CollectionToString(TargetTag) + ","
        + "DmgBuff:" + Bright.Common.StringUtil.CollectionToString(DmgBuff) + ","
        + "ActionBuff:" + Bright.Common.StringUtil.CollectionToString(ActionBuff) + ","
        + "ScriptAct:" + ScriptAct + ","
        + "Val1:" + Val1 + ","
        + "Val2:" + Val2 + ","
        + "Val3:" + Val3 + ","
        + "Val4:" + Val4 + ","
        + "Val5:" + Val5 + ","
        + "Val6:" + Val6 + ","
        + "Val7:" + Val7 + ","
        + "Val8:" + Val8 + ","
        + "Val9:" + Val9 + ","
        + "Val10:" + Val10 + ","
        + "Resource:" + Resource + ","
        + "LanName:" + LanName + ","
        + "LanText1:" + LanText1 + ","
        + "InVerson:" + InVerson + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}