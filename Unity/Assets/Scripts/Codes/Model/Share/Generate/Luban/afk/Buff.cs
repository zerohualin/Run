//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace Cfg.afk
{
public sealed partial class Buff :  Bright.Config.BeanBase 
{
    public Buff(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Type = (BuffType)_buf.ReadInt();
        LanName = _buf.ReadString();
        LanText1 = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Flag = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); Flag.Add(_e0);}}
        OnDeadRemove = _buf.ReadBool();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ImmuneFlag = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); ImmuneFlag.Add(_e0);}}
        FlagLevel = _buf.ReadInt();
        Show = _buf.ReadBool();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ModifyState = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); ModifyState.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);DmgTag = new System.Collections.Generic.List<TagType>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { TagType _e0;  _e0 = (TagType)_buf.ReadInt(); DmgTag.Add(_e0);}}
        DestroyWithCaster = _buf.ReadBool();
        MaxStack = _buf.ReadInt();
        IntervalTime = _buf.ReadInt();
        Duration = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AttrMult = new System.Collections.Generic.List<AttrType>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { AttrType _e0;  _e0 = (AttrType)_buf.ReadInt(); AttrMult.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AttrMultValue = new System.Collections.Generic.List<float>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { float _e0;  _e0 = _buf.ReadFloat(); AttrMultValue.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AttrAdd = new System.Collections.Generic.List<AttrType>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { AttrType _e0;  _e0 = (AttrType)_buf.ReadInt(); AttrAdd.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AttrAddValue = new System.Collections.Generic.List<float>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { float _e0;  _e0 = _buf.ReadFloat(); AttrAddValue.Add(_e0);}}
        Script = _buf.ReadString();
        ScriptTarget = (TargetType)_buf.ReadInt();
        LinkBuff = _buf.ReadString();
        LinkSkill = _buf.ReadString();
        LinkFormula = _buf.ReadString();
        Val1 = _buf.ReadFloat();
        Val2 = _buf.ReadFloat();
        Val3 = _buf.ReadFloat();
        Val4 = _buf.ReadFloat();
        Val5 = _buf.ReadFloat();
        Val6 = _buf.ReadFloat();
        Val7 = _buf.ReadFloat();
        Val8 = _buf.ReadFloat();
        Val9 = _buf.ReadFloat();
        Val10 = _buf.ReadFloat();
        Stack1 = _buf.ReadFloat();
        Stack2 = _buf.ReadFloat();
        Stack3 = _buf.ReadFloat();
        Stack4 = _buf.ReadFloat();
        Stack5 = _buf.ReadFloat();
        Stack6 = _buf.ReadFloat();
        Stack7 = _buf.ReadFloat();
        Stack8 = _buf.ReadFloat();
        Stack9 = _buf.ReadFloat();
        Stack10 = _buf.ReadFloat();
        IconPath = _buf.ReadString();
        PostInit();
    }

    public static Buff DeserializeBuff(ByteBuf _buf)
    {
        return new afk.Buff(_buf);
    }

    public string Id { get; private set; }
    public string Name { get; private set; }
    public BuffType Type { get; private set; }
    public string LanName { get; private set; }
    public string LanText1 { get; private set; }
    public System.Collections.Generic.List<string> Flag { get; private set; }
    public bool OnDeadRemove { get; private set; }
    public System.Collections.Generic.List<string> ImmuneFlag { get; private set; }
    public int FlagLevel { get; private set; }
    public bool Show { get; private set; }
    public System.Collections.Generic.List<string> ModifyState { get; private set; }
    public System.Collections.Generic.List<TagType> DmgTag { get; private set; }
    public bool DestroyWithCaster { get; private set; }
    public int MaxStack { get; private set; }
    public int IntervalTime { get; private set; }
    public int Duration { get; private set; }
    public System.Collections.Generic.List<AttrType> AttrMult { get; private set; }
    public System.Collections.Generic.List<float> AttrMultValue { get; private set; }
    public System.Collections.Generic.List<AttrType> AttrAdd { get; private set; }
    public System.Collections.Generic.List<float> AttrAddValue { get; private set; }
    public string Script { get; private set; }
    public TargetType ScriptTarget { get; private set; }
    public string LinkBuff { get; private set; }
    public string LinkSkill { get; private set; }
    public string LinkFormula { get; private set; }
    public float Val1 { get; private set; }
    public float Val2 { get; private set; }
    public float Val3 { get; private set; }
    public float Val4 { get; private set; }
    public float Val5 { get; private set; }
    public float Val6 { get; private set; }
    public float Val7 { get; private set; }
    public float Val8 { get; private set; }
    public float Val9 { get; private set; }
    public float Val10 { get; private set; }
    public float Stack1 { get; private set; }
    public float Stack2 { get; private set; }
    public float Stack3 { get; private set; }
    public float Stack4 { get; private set; }
    public float Stack5 { get; private set; }
    public float Stack6 { get; private set; }
    public float Stack7 { get; private set; }
    public float Stack8 { get; private set; }
    public float Stack9 { get; private set; }
    public float Stack10 { get; private set; }
    public string IconPath { get; private set; }

    public const int __ID__ = 692855931;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Type:" + Type + ","
        + "LanName:" + LanName + ","
        + "LanText1:" + LanText1 + ","
        + "Flag:" + Bright.Common.StringUtil.CollectionToString(Flag) + ","
        + "OnDeadRemove:" + OnDeadRemove + ","
        + "ImmuneFlag:" + Bright.Common.StringUtil.CollectionToString(ImmuneFlag) + ","
        + "FlagLevel:" + FlagLevel + ","
        + "Show:" + Show + ","
        + "ModifyState:" + Bright.Common.StringUtil.CollectionToString(ModifyState) + ","
        + "DmgTag:" + Bright.Common.StringUtil.CollectionToString(DmgTag) + ","
        + "DestroyWithCaster:" + DestroyWithCaster + ","
        + "MaxStack:" + MaxStack + ","
        + "IntervalTime:" + IntervalTime + ","
        + "Duration:" + Duration + ","
        + "AttrMult:" + Bright.Common.StringUtil.CollectionToString(AttrMult) + ","
        + "AttrMultValue:" + Bright.Common.StringUtil.CollectionToString(AttrMultValue) + ","
        + "AttrAdd:" + Bright.Common.StringUtil.CollectionToString(AttrAdd) + ","
        + "AttrAddValue:" + Bright.Common.StringUtil.CollectionToString(AttrAddValue) + ","
        + "Script:" + Script + ","
        + "ScriptTarget:" + ScriptTarget + ","
        + "LinkBuff:" + LinkBuff + ","
        + "LinkSkill:" + LinkSkill + ","
        + "LinkFormula:" + LinkFormula + ","
        + "Val1:" + Val1 + ","
        + "Val2:" + Val2 + ","
        + "Val3:" + Val3 + ","
        + "Val4:" + Val4 + ","
        + "Val5:" + Val5 + ","
        + "Val6:" + Val6 + ","
        + "Val7:" + Val7 + ","
        + "Val8:" + Val8 + ","
        + "Val9:" + Val9 + ","
        + "Val10:" + Val10 + ","
        + "Stack1:" + Stack1 + ","
        + "Stack2:" + Stack2 + ","
        + "Stack3:" + Stack3 + ","
        + "Stack4:" + Stack4 + ","
        + "Stack5:" + Stack5 + ","
        + "Stack6:" + Stack6 + ","
        + "Stack7:" + Stack7 + ","
        + "Stack8:" + Stack8 + ","
        + "Stack9:" + Stack9 + ","
        + "Stack10:" + Stack10 + ","
        + "IconPath:" + IconPath + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}